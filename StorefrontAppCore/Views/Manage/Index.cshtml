@using StorefrontAppCore.Models
@model IndexViewModel
@{
    ViewBag.Title = "Manage";
}
<head>
    <link rel="stylesheet" type="text/css" href="~/css/global_styles.css"  asp-append-version="true" />
</head>

<main aria-labelledby="title">

    <p class="text-success">@ViewBag.StatusMessage</p>
    <div>
        <h2>General Account Settings:</h2>
        <hr />
        <h5><u>Change Credentials</u></h5>
        <div class="container">
            <div class="row flex-wrap">
                <div class="col-md-6">
                    <div class="list-group w-50">
                        @Html.ActionLink("Change Username", "ChangeUsername", "Manage", null, new { @class = "list-group-item list-group-item-action" })
                        @Html.ActionLink("Change Email", "ChangeEmail", "Manage", null, new { @class = "list-group-item list-group-item-action" })
                        @if (Model.HasPassword)
                        {
                            @Html.ActionLink("Change Password", "ChangePassword", "Manage", null, new { @class = "list-group-item list-group-item-action" })
                        }
                        else
                        {
                            @Html.ActionLink("Create", "SetPassword", "Manage", null, new { @class = "list-group-item list-group-item-action" })
                        }
                    </div>
                </div>
                <div class="col-md-6">
                    @if (!Model.EmailConfirmed)
                    {
                        <div class="card w-75">
                            <div class="card-body">
                                <h5 class="card-title"><u>Unconfirmed Account</u></h5>
                                <ul>
                                    <li class="card-text">If the email that you provided does not work, change it.</li>
                                </ul>
                                @using (Html.BeginForm("ResendConfirmationEmail", "Account", FormMethod.Post, new { role = "form" }))
                                {
                                @Html.AntiForgeryToken()
                                <div class="row justify-content-start">
                                    <div class="col-auto">
                                        <input type="submit" value="Resend Confirmation Email" class="btn btn-light" />
                                    </div>
                                </div>
                                }
                            </div>
                        </div>

                    }
                </div>
            </div>
        </div>
        <br />
        <dt><u>Two-Factor Authentication</u></dt>
        <dd>
            @if (Model.TwoFactor)
            {
                using (Html.BeginForm("DisableTwoFactorAuthentication", "Manage", FormMethod.Post, new { @class = "form-horizontal", role = "form" }))
                {
                    @Html.AntiForgeryToken()
                    <text><mark>Enabled</mark>
                        <input type="submit" value="Disable" class="btn btn-link" id="two-FA-link" />
                    </text>
                }
            }
            else
            {
                using (Html.BeginForm("EnableTwoFactorAuthentication", "Manage", FormMethod.Post, new { @class = "form-horizontal", role = "form" }))
                {
                    @Html.AntiForgeryToken()
                    <text><mark>Disabled</mark>
                        <input type="submit" value="Enable" class="btn btn-link" id="two-FA-link" />
                    </text>
                }
            }
        </dd>
        <br />
        @if (Model.StoreAccountCreated)
        {
            <br />
            <div class="alias-note">
                <strong>Alias Note</strong>
                <ul>
                    <li>An account alias is used to connect to the companion <a id="specialRef" href="https://slushbanking20240729194751.azurewebsites.net/ ">SlushBanking</a> website. It must match the other website's alias.</li>
                    <li><strong>Aliases are alphanumeric characters only.</strong></li>
                </ul>
            </div>
            <details>
                <p class="lead">
                    <summary><strong>Account Alias:</strong></summary>
                    &emsp;@Model.AliasName
                </p>
            </details>
            using (Html.BeginForm("SetAccountAlias", "Manage", FormMethod.Post, new { role = "form" }))
            {
                @Html.AntiForgeryToken()
                @Html.ValidationSummary("", new { @class = "text-danger" })
                <br />
                <div class="row">
                    @Html.LabelFor(m => m.ChangeAliasInput, new { @class = "col-md-1 col-form-label" })
                    <div class="col-md-5">
                        @Html.TextBoxFor(m => m.ChangeAliasInput, new { @class = "form-control", required = "required" })
                    </div>
                </div>
                <div class="row">
                    <div class="offset-md-1 col-md-10">
                        <input type="submit" value="Change Alias" class="btn btn-outline-dark" />
                    </div>
                </div>
                <br />
            }
        }
    </div>
    <br />
    <h2>Customer Account Settings:</h2>
    <hr />
    <div>
        @if (ViewBag.Message != null)
        {
            <div class="alert alert-primary" role="alert">
                @ViewBag.Message
            </div>
            <br />
        }
        <br />
        @if (Model.PaymentMethods != null && Model.PaymentMethods.Count > 0)
        {
            <table class="table table-striped table-hover">
                <thead>
                    <tr class="table">
                        <th scope="col">Card Number</th>
                        <th scope="col">Key ID</th>
                        <th scope="col">Remove Method</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var paymentMethod in Model.PaymentMethods)
                    {
                        if (!paymentMethod.Deactivated)
                        {
                            <tr>
                                <td>@paymentMethod.CardNumber</td>
                                <td>@paymentMethod.KeyPIN</td>
                                <td>
                                    @using (Html.BeginForm("RemovePaymentMethod", "Manage", new { paymentMethodID = paymentMethod.PaymentMethodID }, FormMethod.Post))
                                    {
                                        @Html.AntiForgeryToken()
                                        <button type="submit" class="btn btn-outline-dark">Remove</button>
                                    }
                                </td>
                            </tr>
                        }
                    }
                </tbody>
            </table>
            <br />
        }
        else
        {
            <div class="alert alert-primary" role="alert">
                Could not find any payment methods. Please use ones only from the companion banking website: <a id="specialRef" href="https://slushbanking20240729194751.azurewebsites.net/ ">SlushBanking</a>. <strong>This requires a store account.</strong>
            </div>
            <br />
        }
        @if (Model.StoreAccountCreated)
        {
            <div class="payment-method-note-section">
                <strong>Payment Method Note:</strong>
                <ul>
                    <li>The Key ID is a 5-digit non-negative, non-decimal number issued from the companion <a id="specialRef" href="https://slushbanking20240729194751.azurewebsites.net/ ">SlushBanking</a> website. No other issued cards will work.</li>
                </ul>
            </div>
            using (Html.BeginForm("AddPaymentMethod", "Manage", FormMethod.Post, new { role = "form" }))
            {
                @Html.AntiForgeryToken()
                @Html.ValidationSummary("", new { @class = "text-danger" })
                <div class="row">
                    @Html.LabelFor(m => m.CardNumber, new { @class = "col-md-2 col-form-label" })
                    <div class="col-md-2">
                        @Html.TextBoxFor(m => m.CardNumber, new { @class = "form-control", required = "required", maxLength = "11" })
                    </div>
                </div>
                <br />
                <div class="row">
                    @Html.LabelFor(m => m.KeyPIN, new { @class = "col-md-2 col-form-label" })
                    <div class="col-md-2">
                        @Html.TextBoxFor(m => m.KeyPIN, new { @class = "form-control", required = "required", maxLength = 5 })
                        @Html.ValidationMessageFor(model => model.KeyPIN)
                    </div>
                </div>
                <br />
                <div class="row">
                    <div class="offset-md-2 col-md-10">
                        <input type="submit" value="Add Payment Method" class="btn btn-outline-dark" />
                    </div>
                </div>
            }
            <br /><br />
            <h3>Current Shopping Cart:</h3>
            if (Model.ShoppingCartItems != null && Model.ShoppingCartItems.Count > 0)
            {
                <div class="overflow-auto" style="max-height: 500px; border: 1px solid #ddd; padding: 15px;">
                    <div class="accordion accordian-flush">
                        @foreach (var item in Model.ShoppingCartItems)
                        {
                            var productId = item.Product.ProductID;
                            <div class="accordion-item">
                                <h2 class="accordion-header" id="heading_@productId">
                                    <button class="accordion-button collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#collapse_@productId" aria-expanded="false" aria-controls="collapse_@productId">
                                        @item.Product.ProductName
                                    </button>
                                </h2>
                                <div class="accordion-collapse collapse" id="collapse_@productId" data-bs-parent="#shoppingCartAccordion">
                                    <div class="accordion-body">
                                        Type: @item.Product.ProductType
                                        <br />
                                        Price: @item.Product.Price, Quantity: @item.Quantity
                                        <br />
                                        Description: @item.Product.ProductDescription
                                        <br />
                                        Supplier: @item.Product.Supplier.SupplierName
                                        <br />
                                        @using (Html.BeginForm("RemoveFromCart", "Home", new { productID = item.ProductID, shoppingCartID = item.ShoppingCartID, returnControllerPath = "Manage" }, FormMethod.Post))
                                        {
                                            @Html.AntiForgeryToken()
                                            <button type="submit" class="btn btn-outline-dark">Remove</button>
                                        }
                                    </div>
                                </div>
                            </div>
                        }
                        <div class="accordion-body">
                            <h5>Proceed To Checkout:</h5>
                            @Html.ActionLink("Checkout", "CreateOrder", "Manage", null, new { @class = "btn btn-outline-dark" })
                        </div>
                    </div>
                    <hr />
                </div>
            }
            else
            {
                <div class="alert alert-primary" role="alert">
                    No shopping cart items available.
                </div>
            }
            <br /><br />
            <h3>Current Orders:</h3>
            if (Model.Orders != null && Model.Orders.Count > 0)
            {
                <div class="overflow-auto" style="max-height: 550px; border: 1px solid #ddd; padding: 8px;">
                    @foreach (var order in Model.Orders)
                    {
                        <div class="card" style="width:auto">
                            <div class="card-header">
                                Order ID: @order.OrderID
                            </div>
                            <div class="card-body">
                                <div class="row">
                                    @foreach (var item in order.OrderItems)
                                    {
                                        <div class="col-auto">
                                            <div class="card w-100">
                                                <div class="card-body">
                                                    <h5 class="card-title">@item.Product.ProductName</h5>
                                                    <h6 class="card-subtitle mb-2 text-muted">@item.Product.ProductType</h6>
                                                    <hr />
                                                    <p class="card-text">
                                                        <strong>Price:</strong> @item.Product.Price &emsp;<strong>Quantity:</strong> @item.Quantity<br />
                                                        <strong>Description:</strong> @item.Product.ProductDescription<br />
                                                        <strong>Supplier:</strong> @item.Product.Supplier.SupplierName
                                                    </p>
                                                </div>
                                            </div>
                                        </div>
                                    }
                                </div>
                                <div class="mt-3">
                                    <h6>Total Order Price: @order.TotalPrice &ensp;|&ensp; Status: @order.Status &ensp;|&ensp; Payment Method: @order.PaymentMethod.CardNumber</h6>
                                    @if (!(order.Status == StorefrontAppCore.Models.OrderStatus.Refunded))
                                    {
                                        using (Html.BeginForm("RefundOrder", "Manage", new { orderID = order.OrderID }, FormMethod.Post))
                                        {
                                            @Html.AntiForgeryToken()
                                            <button type="submit" class="btn btn-outline-dark">Refund</button>
                                        }
                                    }
                                </div>
                            </div>
                            <br />
                        </div>
                    }
                </div><br />
            }
            else
            {
                <div class="alert alert-primary">
                    No store orders were made.
                </div><br />
            }
        }
        else
        {
            <strong>Store Account Not Created</strong>
            <ul>
                <li>A store account is needed to interact with the store system.</li>
                <li>An account alias is needed to interact with the companion storefront website.</li>
                <li>The account alias must match the same one used for the companion bank website.</li>
                <li>An account alias cannot already be in use, make it strong. <strong>Alphanumeric characters only.</strong></li>
            </ul>
            <br />
            using (Html.BeginForm("CreateStoreAccount", "Manage", FormMethod.Post, new { role = "form" }))
            {
                @Html.AntiForgeryToken()
                @Html.ValidationSummary("", new { @class = "text-danger" })
                <div class="row">
                    @Html.LabelFor(m => m.AccountTypeInput, new { @class = "col-md-2 col-form-label" })
                    <div class="col-md-5">
                        @{
                            var accountTypes = Enum.GetValues(typeof(StorefrontAppCore.Models.AccountType))
                                               .Cast<StorefrontAppCore.Models.AccountType>()
                                               .Where(e => e == StorefrontAppCore.Models.AccountType.Personal);
                            var selectList = new SelectList(accountTypes);
                        }
                        @Html.DropDownListFor(m => m.AccountTypeInput, selectList, new { @class = "form-control" })
                    </div>
                </div>
                <br />
                <div class="row">
                    @Html.LabelFor(m => m.AccountAliasInput, new { @class = "col-md-2 col-form-label" })
                    <div class="col-md-5">
                        @Html.TextBoxFor(m => m.AccountAliasInput, new { @class = "form-control" })
                    </div>
                </div>
                <br />
                <div class="row">
                    <div class="offset-md-2 col-md-10">
                        <input type="submit" value="Create Store Account" class="btn btn-outline-dark" />
                    </div>
                </div>
                <br />
            }
        }
    </div>
</main>